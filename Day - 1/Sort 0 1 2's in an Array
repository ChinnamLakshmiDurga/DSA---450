Sort an array of 0s, 1s and 2s 
Given an array of size N containing only 0s, 1s, and 2s; sort the array in ascending order.

Example 1:
Input: 
N = 5
arr[]= {0 2 1 2 0}
Output:
0 0 1 2 2
Explanation:
0s 1s and 2s are segregated into ascending order.

Approach-1:
1. Using DNF sort approach where we use 3 pointers and update the array.
Code:
void sort012(int a[], int n)
{
        int mid=0;
        int low=0;
        int high=n-1;
        while(mid<=high){
            if(a[mid]==0){
                swap(a[mid++],a[low++]);
            }
            else if(a[mid]==2){
                swap(a[mid],a[high--]);
            }
            else{
                mid++;
            }
        }
}

Approach-2:
1. Using the STL sort function to sort the array.
Code:
void sort012(int a[], int n){
    sort(a,a+n);
}

Approach-3:
1. Initialize three variables zero,one and two to store the number of zeroes, ones and twos present in the array.
2. Add as many zeroes in the array as the zero variable has and do this same with ones and twos with the one and two variables.
Code:
#include <iostream>
using namespace std;

int main()
{
   int arr[8]={0,2,1,0,2,1,0,2};
   
   int zero=0,one=0,two=0;
   
   for(int i=0;i<8;i++){
       if(arr[i]==0){
           zero++;
       }
       else if(arr[i]==1){
           one++;
       }
       else if(arr[i]==2){
           two++;
       }
   }
   
   int i=0;
   for(int i=0;i<8;i++){
       while(zero>=0){
          arr[i++]=0;
          zero--;
       }
        while(one>=0){
          arr[i++]=1;
          one--;
       } 
       while(two>=0){
          arr[i++]=2;
          two--;
       }
   }
   
   for(int i=0;i<8;i++){
       cout<<arr[i]<<" ";
   }
   return 0;
}


Kadane's Algorithm :

Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.

Example 1:
Input:
N = 5
Arr[] = {1,2,3,-2,5}
Output:
9
Explanation:
Max subarray sum is 9
of elements (1, 2, 3, -2, 5) which is a contiguous subarray.

Example 2:
Input:
N = 4
Arr[] = {-1,-2,-3,-4}
Output:
-1
Explanation:
Max subarray sum is -1  of element (-1).

Approach:
1. Initialize:
    ans = INT_MIN
    curr_sum = 0
2. Loop for each element of the array
  (a) curr_sum += arr[i]
  (b) ans = max(ans,curr_sum)
  (c) if(curr_sum < 0)
            curr_sum = 0
return ans

Code:
long long maxSubarraySum(int arr[], int n){
        int curr_sum=0;
        int ans=INT_MIN;
        for(int i=0;i<n;i++){
            curr_sum+=arr[i];
            ans=max(ans,curr_sum);
            if(curr_sum<0){
                curr_sum=0;
            }   
        }
        return ans; 
 }
